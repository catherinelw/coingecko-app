import Head from "next/head";
import styles from "../styles/Home.module.css";
import CoinGecko from "coingecko-api";
import "antd/dist/antd.css";
import { Table, Input, Button, Space } from "antd";
import Highlighter from "react-highlight-words";
import { SearchOutlined } from "@ant-design/icons";
import Link from "next/link";
import React, { useState } from "react";
import Router from "next/router";
import NProgress from "nprogress";

const CoinGeckoClient = new CoinGecko();

Router.onRouteChangeStart = (url) => {
  NProgress.start();
};
Router.onRouteChangComplete = () => NProgress.done();

Router.onRouteChangeError = () => NProgress.done();

export default function Home(props) {
  const { data } = props.result;
  const [searchText, setSearchText] = useState("");
  const [searchedColumn, setSearchedColumn] = useState("");

  const dataSource = data.map((coin) => {
    return {
      icon: coin.image,
      name: coin.name,
      symbol: coin.symbol.toUpperCase(),
      change: coin.price_change_percentage_24h,
      price: coin.current_price,
      marketCap: coin.market_cap,
    };
  });
  let searchInput;

  const getColumnSearchProps = (dataIndex) => ({
    filterDropdown: ({
      setSelectedKeys,
      selectedKeys,
      confirm,
      clearFilters,
    }) => (
      <div style={{ padding: 8 }}>
        <Input
          ref={(node) => {
            return (searchInput = node);
          }}
          placeholder={`Search ${dataIndex}`}
          value={selectedKeys[0]}
          onChange={(e) =>
            setSelectedKeys(e.target.value ? [e.target.value] : [])
          }
          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
          style={{ marginBottom: 8, display: "block" }}
        />
        <Space>
          <Button
            type="primary"
            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
            icon={<SearchOutlined />}
            size="small"
            style={{ width: 90 }}
          >
            Search
          </Button>
          <Button
            onClick={() => handleReset(clearFilters)}
            size="small"
            style={{ width: 90 }}
          >
            Reset
          </Button>
          <Button
            type="link"
            size="small"
            onClick={() => {
              confirm({ closeDropdown: false });
              setSearchText(selectedKeys[0]), setSearchedColumn(dataIndex);
            }}
          >
            Filter
          </Button>
        </Space>
      </div>
    ),
    filterIcon: (filtered) => (
      <SearchOutlined style={{ color: filtered ? "#1890ff" : undefined }} />
    ),
    onFilter: (value, record) =>
      record[dataIndex]
        ? record[dataIndex]
            .toString()
            .toLowerCase()
            .includes(value.toLowerCase())
        : "",
    onFilterDropdownVisibleChange: (visible) => {
      if (visible) {
        setTimeout(() => searchInput.select(), 100);
      }
    },
    render: (text) =>
      searchedColumn === dataIndex ? (
        <Highlighter
          highlightStyle={{ backgroundColor: "#ffc069", padding: 0 }}
          searchWords={[searchText]}
          autoEscape
          textToHighlight={text ? text.toString() : ""}
        />
      ) : (
        text
      ),
  });

  const handleSearch = (selectedKeys, confirm, dataIndex) => {
    confirm();
    setSearchText(selectedKeys[0]), setSearchedColumn(dataIndex);
  };

  const handleReset = (clearFilters) => {
    clearFilters();
    setSearchText("");
  };

  const columns = [
    {
      title: "Coin",
      dataIndex: "icon",
      key: "icon",
      render: (text, record) => (
        <img
          src={record.icon}
          style={{ width: 20, height: 20, marginRight: 10 }}
        />
      ),
    },
    {
      title: "Name",
      dataIndex: "name",
      key: "name",
      ...getColumnSearchProps("name"),
    },
    {
      title: "Symbol",
      dataIndex: "symbol",
      key: "symbol",
      ...getColumnSearchProps("symbol"),
    },
    {
      title: "24H Change",
      dataIndex: "change",
      key: "change",
      sorter: (a, b) => a.change - b.change,
    },
    {
      title: "Price",
      dataIndex: "price",
      key: "price",
      sorter: (a, b) => a.change - b.change,
    },
    {
      title: "Market Cap",
      dataIndex: "marketCap",
      key: "marketCap",
      sorter: (a, b) => a.change - b.change,
    },
  ];
  return (
    <div className={styles.container}>
      <Head>
        <title>CoinGecko App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Link href="/">
          <a className={styles.link}>Home</a>
        </Link>
        <Link href="/volume">
          <a className={styles.link}>Volume</a>
        </Link>
      </header>
      <h1>CoinGecko App</h1>
      <Table
        className={styles.table}
        dataSource={dataSource}
        rowKey="id"
        columns={columns}
        pagination={true}
      />
    </div>
  );
}

export async function getServerSideProps(context) {
  const params = {
    order: CoinGecko.ORDER.MARKET_CAP_DESC,
  };
  const result = await CoinGeckoClient.coins.markets({ params });
  return {
    props: {
      result,
      loading: false,
    },
  };
}
